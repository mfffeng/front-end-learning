/* Padding: Space between the content and the border of a box */
/* Margin: Space between boxes */
/* Border: Space between the margin and the padding */

div {
    padding: 30px;
    text-align: center;
    margin-bottom: 10px;
    color: #EEEEEE;
}

.introduction {
    background-color: #548CA8;
}

.main-content {
    background-color: #476072;
}

.contact-us {
    background-color: #334257;
}

.highlight {
    background-color: yellow;
}

.flex-container {
    display: flex;
    gap: 9px;
    /* Defines the main axis of the flex container */
    /* flex-direction: row | row-reverse | column | column-reverse; */
    flex-direction: row;
    /* `flex-basis` refers to height in column mode, width in row mode */
}

/* this selector selects all divs inside of .flex-container */
/* `flex-grow` defines the relative size of a flex item */
/* Items with larger `flex` values will push items with smaller `flex` values aside */
.flex-container div {
    background: peachpuff;
    border: 4px solid brown;
    height: 100px;
    width: 100px;
    /* Shorthand for `flex-grow: 1` */
    /* flex: 1; */
    /* flex: flex-grow | flex-shrink | flex-basis; */

    /* `flex-shrink` defines the ability for an item to shrink if the space is not enough */
    /* Uncomment the following line, and 1 & 3 will shrink, while 2 stays at the same size */
    /* width: 250px; */
    flex: 3 0 0;
    /* Empty div has a height of 0px, so if we set `flex-basis` to 0 and remove the div style */
    /* on top of this file, the container won't show */
    /* anyting (as the initial heights of the boxes are 0 and the div also has a height of 0) */
    /* This in turn means that the flex items indeed don't need heights greater than 0 */

}


.flex-container .two {
    background: peachpuff;
    border: 4px solid brown;
    height: 100px;
    width: 100px;
    /* `flex-basis` defines the initial size of the item */
    /* Defaults to auto, but turns to 0%  if `flex` is set */
    /* Have to change back to `auto`, otherwise it would shrink evenly and ignore `flex-shrink` */
    flex: 1 0 0;
}


/* Alignment Techniques */
.container {
    height: 140px;
    padding: 16px;
    background: plum;
    border: 4px solid indigo;
    display: flex;
    /* An alternative to using `flex` for positioning */
    /* `justify-content` defines the alignment of items along the main axis */
    justify-content: space-between;
    /* `align-items` defines the alignment of the items along the cross axis */
    align-items: center;
    /* Add gaps between items */
    /* gap: 8px; */
    white-space: nowrap;
}
  
.item {
    width: 60px;
    height: 60px;
    border: 4px solid darkslategray;
    background: skyblue;
    /* flex: 1; */
    box-shadow: 12px 12px 2px 1px rgba(0, 0, 255, .2);
}

/* Select the iterm with id 2 */
#two{
    background: lightgreen;
    text-overflow: ellipsis;
    /* text color */
    color: black;
    overflow: scroll;
    overflow-y: hidden;
}